# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#

name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    env:
      ARM_CLIENT_ID: 9cdf587b-1e7b-439c-a246-7d2ad7c69da1
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: 2ca7f686-b554-401a-8630-3ebc46e42e64
      ARM_TENANT_ID: ba82b308-dd6b-4236-b218-6262064c27ee
      TF_VAR_CONTENTFUL_APIKEY: ${{secrerts.TF_VAR_CONTENTFUL_APIKEY}}
      TF_VAR_CONTENTFUL_SPACE: ${{secrets.TF_VAR_CONTENTFUL_SPACE}}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    #- name: Install Azure CLI
    #  run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash 

    - name: Check for az command (user)
      run: which az && az --version

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform -chdir=Terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -recursive

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform -chdir=Terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' 
      run: terraform -chdir=Terraform apply -auto-approve -input=false
